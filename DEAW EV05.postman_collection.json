{
	"info": {
		"_postman_id": "3c38b9e7-b2eb-42c9-82d8-32f94dd370b2",
		"name": "DEAW EV05",
		"description": "En este archivo de ejemplo encontrarás las consultas HTTP básicas necesarias para completar la Tarea Evaluativa 2 de la Unidad Didáctica 3 de DWES. El ejemplo está basado en una aplicación de una **base de datos sobre videojuegos**, en la que podrás realizar operaciones CRUD sobre los juegos, compañías o sistemas de la BBDD.\n\n🔍 **¿Qué puedes hacer?**  \nCon esta colección, podrás ejecutar las operaciones básicas de un sistema REST para gestionar juegos/compañías/sistemas en el sistema. Entre las operaciones disponibles, encontrarás:\n\n1. **Recuperar la información de todos/as los/as juegos/compañías/sistemas**: Verás la lista completa de los elementos en el sistema.\n    \n2. **Consultar un/a juego/compañía/sistema** **específico por su ID**: Obtendrás los detalles del elemento concreto.\n    \n3. **Insertar un/a nuevo juego/compañía/sistema**s: Podrás añadir una nuevo elemento.\n    \n4. **Modificar un/a juego/compañía/sistemaexistente**: Actualiza el contenido o título de un elemento.\n    \n5. **Eliminar un/a juego/compañía/sistema**: Elimina un elemento de forma definitiva.\n    \n\n🌟 **Estructura del Ejemplo**  \nCada operación de esta plantilla cuenta con instrucciones detalladas y ejemplos de cómo enviar y recibir los datos en formato JSON. Solo necesitas hacer clic en **Send** en cada solicitud para ejecutarla y ver los resultados en tiempo real.\n\n💡 **Consejo**: Usa el archivo para familiarizarte con las consultas que deberás implementar y personalizar en tu propio servicio en la tarea evaluativa. Cada solicitud incluye una descripción paso a paso para ayudarte a entender cómo funcionan las operaciones CRUD en una API RESTful.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39852951"
	},
	"item": [
		{
			"name": "Post user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Eduardo\",\n    \"lastName\":\"Ercilla\",\n    \"email\": \"eercilla@birt.eus\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				},
				"description": "Esta solicitud POST crearía un nuevo juego en el sistema.\n\n**Caso de uso:** En este caso, en el cuerpo de la solicitud se recibiría un JSON con los campos que se quiera y se guardaría un nuevo juego"
			},
			"response": []
		},
		{
			"name": "Post user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Eduardo2\",\n    \"lastName\":\"Ercilla2\",\n    \"email\": \"eercilla2@birt.eus\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user"
					]
				},
				"description": "Esta solicitud POST crearía una nueva compania en el sistema.\n\n**Caso de uso:** En este caso, en el cuerpo de la solicitud se recibiría un JSON con los campos que se quiera y se guardaría una nueva compania"
			},
			"response": []
		},
		{
			"name": "Get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				},
				"description": "Esta solicitud GET obtiene una lista de todos juegos disponibles en el sistema.\n\n**Caso de uso:** Al pulsar enviar debería devolver la información de todos los juegos disponibles"
			},
			"response": []
		},
		{
			"name": "Get user por ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users",
						"1"
					]
				},
				"description": "Esta solicitud GET obtiene una lista de todos juegos disponibles en el sistema.\n\n**Caso de uso:** Al pulsar enviar debería devolver la información de todos los juegos disponibles"
			},
			"response": []
		},
		{
			"name": "Update user por ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Birt\",\n    \"lastName\":\"Birt\",\n    \"email\": \"birt@birt.eus\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users",
						"1"
					]
				},
				"description": "Esta solicitud PUT actualiza un juego existente en el sistema basándose en su ID.\n\n**Caso de uso:** Si se cambia el valor de `1` al ID del juego que quieres actualizar, editando las características en el cuerpo de la solicitud con los valores nuevos se anyadirían o modificarían el contenido de ese juego concreto"
			},
			"response": []
		},
		{
			"name": "Delete user por ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users",
						"1"
					]
				},
				"description": "Esta solicitud DELETE elimina un juego específico del sistema por su ID.\n\n**Caso de uso:** Si se cambia el valor de `1` al ID del juego que quieres eliminar, este se eliminaría al recibir y procesar la solicitud"
			},
			"response": []
		},
		{
			"name": "Get users final",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				},
				"description": "Esta solicitud GET obtiene una lista de todos juegos disponibles en el sistema.\n\n**Caso de uso:** Al pulsar enviar debería devolver la información de todos los juegos disponibles"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}